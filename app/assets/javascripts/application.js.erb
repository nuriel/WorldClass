// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// the compiled file.
//
// WARNING: THE FIRST BLANK LINE MARKS THE END OF WHAT'S TO BE PROCESSED, ANY BLANK LINE SHOULD
// GO AFTER THE REQUIRES BELOW.
//
//= require jquery
//= require jquery_ujs
//= require twitter/bootstrap
//= require underscore
//= require gmaps/google
//= require geoPosition
//= require jquery.flot
//= require jquery.flot.resize
//= require_tree .


// main function to initiate all
$(function() {
  var faye = new Faye.Client('<%= Rails.env.production? ? 'http://world-class.herokuapp.com/faye' : 'http://localhost:9292/faye' %>');

    // Faye channels configuration
  faye.subscribe('/users/update', function (data) {
    eval(data);
  });
  faye.subscribe('/questions/new', function (data) {
    eval(data);
  });
  faye.subscribe('/answers/new', function (data) {
    eval(data);
  });
  faye.subscribe('/question/answer', function (data) {
    eval(data);
  });
  faye.subscribe('/control', function (data) {
    control_playback(data.type, data.seconds);
  });

  $('body').on('click', ".player_external_controller", function(){
    var type = $(this).data('control-type')
    var seconds = $(this).data('seconds') || 0
    if ($(".external_controllers").hasClass('teacher')){
      control_playback('type')
      faye.publish('/control', {
        type: type,
        seconds: parseInt(seconds)
      });
    }
  })


  google.maps.event.addDomListener(window, "load", initialize);

});

function initialize()
{
  if(geoPosition.init())
  {
    document.getElementById('current').innerHTML="Receiving...";
    geoPosition.getCurrentPosition(showPosition,function(){document.getElementById('current').innerHTML="Couldn't get location"},{enableHighAccuracy:true});
    if ($('#map').length) {
      initiateGmaps()
    }
  }
  else
  {
    document.getElementById('current').innerHTML="Functionality not available";
  }

}

// 3. This function creates an <iframe> (and YouTube player)
//    after the API code downloads.
var player;
function onYouTubeIframeAPIReady() {
  var videoId = $('#player').data('video_id')
//  console.log(videoId)
  player = new YT.Player('player', {
    height: '390',
    width: '640',
    videoId: videoId,
    events: {
      'onReady': onPlayerReady,
      'onStateChange': onPlayerStateChange
    }
  });
}

// 4. The API will call this function when the video player is ready.
var ytplayer;
function onPlayerReady(event) {
  extendYoutubePlayer(event.target);
  ytplayer = event.target
}

// 5. The API calls this function when the player's state changes.
//    The function indicates that when playing a video (state=1),
//    the player should play for six seconds and then stop.
var done = false;
function onPlayerStateChange(event) {
  if (event.data == YT.PlayerState.PLAYING && !done) {
//    setTimeout(stopVideo, 6000);
    done = true;
  }
}
function stopVideo() {
  player.stopVideo();
}

function showPosition(p)
{
  var lat = parseFloat( p.coords.latitude );
  var lng = parseFloat( p.coords.longitude );
  document.getElementById('current').innerHTML="latitude=" + lat + " longitude=" + lng;
  $('#hidden_lat').val(lat);
  $('#hidden_lng').val(lng);

}

function positionError(error) {
  alert('position error');
}

function extendYoutubePlayer(ytplayer) {
    // This causes the updatePlayerInfo function to be called every 250ms to
    // get fresh data from the player
    var tid = setInterval(updatePlayerInfo, 250);
    updatePlayerInfo();

    var seconds = 0

    function updatePlayerInfo() {
      seconds = ytplayer.getCurrentTime().toFixed(2);
      $("[data-update='classroom_video_time']").text(seconds);
      any_focused = false
        $(".new_question_field").each( function() {
            if ($(this).is(':focus')) {
                any_focused = true
            } else {
                // do nothing
            }
        })
        if (!any_focused) {
            $('#time_counter').val(seconds)
        }
      $("[data-update='classroom_question_time']").text($('#time_counter').val());

    }

    function abortTimer() { // to be called when you want to stop the timer
        clearInterval(tid);
    }

}

function control_playback(type, seconds) {
  seconds = seconds || 0;
  switch (type) {
    case 'play' :
      ytplayer.playVideo();
      break;
    case 'pause' :
      ytplayer.pauseVideo();
      break;
    case 'rewindToStart' :
      ytplayer.seekTo(0, true);
      break;
    case 'seekTo' :
      ytplayer.seekTo(seconds, true);
      break;
  }
}


var initiateGmaps = function() {
    handler = Gmaps.build('Google');
    handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
        markers = handler.addMarkers(gon.map_json);
        handler.bounds.extendWith(markers);
        handler.fitMapToBounds();
    });
}

/// GENERAL FUNCTIONS ///

var incrementString = function(oldStr) {
  return newStr = oldStr.replace(/(\d+)+/g, function(match, number) {
    return parseInt(number)+1;
  });
}
